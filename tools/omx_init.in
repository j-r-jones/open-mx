#!/bin/sh

# chkconfig: 2345 30 70
# description: starts Open-MX driver

### BEGIN INIT INFO
# Provides:          mx
# Required-Start:    $network $syslog $remote_fs
# Required-Stop:     $network $syslog $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       Starts the Open-MX driver
### END INIT INFO

# Note that this is replaced by make install, not configure!
OMX_PREFIX=@omx_install_prefix@
MAIN_DEVICE_NAME=@omx_main_device_name@
MAIN_DEVICE_GROUP=@omx_main_device_group@
MAIN_DEVICE_MODE=@omx_main_device_mode@
RAW_DEVICE_NAME=@omx_raw_device_name@
RAW_DEVICE_GROUP=@omx_raw_device_group@
RAW_DEVICE_MODE=@omx_raw_device_mode@
OMX_STATIC_MAPPING=@omx_static_peers@
OMX_PEER_DISCOVERY=@omx_peer_discovery@
OMX_PEERS_FILE=@omx_peers_file@

OMX_PID_FILE=/var/run/open-mx.peer-discovery.pid
OMX_CONFIG=/etc/open-mx/open-mx.conf
LINUX_RELEASE=$(uname -r)
OMX_MODULE="${OMX_PREFIX}/lib/modules/${LINUX_RELEASE}/open-mx.ko"

set -e

if test ! -d ${OMX_PREFIX}; then
    echo "Something bad happened with the install script"
    echo "OMX_PREFIX isn't pointing to a valid directory"
    exit 1
fi

if test -r ${OMX_CONFIG}; then
    . ${OMX_CONFIG}
fi

usage () {
	echo "Usage: $0 [options] <command> [module load params]"
	echo " Commands:	start stop status restart kill"
	echo "          	start-discovery stop-discovery restart-discovery kill-discovery"
	echo " Options:"
	echo "  --dynamic-peers		Force dynamic peer discovery"
	echo "  --dynamic-peers=<prog>	Force <prog> as the peer discovery tool instead of $OMX_PEER_DISCOVERY"
	echo "  --static-peers		Force static peers from $OMX_PEERS_FILE"
	echo "  --static-peers=<file>		Force static peers from <file>"
	echo "  --module=<file>		Use kernel module from <file>"
	exit 1
}

cmd=
module_params=

while [ $# -ne 0 ] ; do
    if [ $1 = "--dynamic-peers" ] ; then
	OMX_STATIC_MAPPING=0
    else if [ ${1##--dynamic-peers=} != $1 ] ; then
	OMX_STATIC_MAPPING=0
	OMX_PEER_DISCOVERY=${1##--dynamic-peers=}
    else if [ $1 = "--static-peers" ] ; then
	OMX_STATIC_MAPPING=1
    else if [ ${1##--static-peers=} != $1 ] ; then
	OMX_STATIC_MAPPING=1
	OMX_PEERS_FILE=${1##--static-peers=}
    else if [ ${1##--module=} != $1 ] ; then
	OMX_MODULE=${1##--module=}
    else if [ ${1##--} != $1 ] ; then
	usage
    else if [ -z "$cmd" ] ; then
	cmd=$1
    else
	module_params="$module_params $1"
    fi fi fi fi fi fi fi
    shift
done

[ -z "$cmd" ] && usage

OMX_MODULE_PARAMS="${OMX_MODULE_PARAMS} ifnames=${IFACES}"

# Remove the Open-MX module if loaded
unload_omx() {
    if grep -E 'open(-|_)mx' /proc/modules > /dev/null; then
        echo "Removing Open-MX driver"
        /sbin/rmmod open-mx
    fi
    rm -f "$MAIN_DEVICE_NAME" || true
}

# Load the Open-MX module
load_omx() {
    params="$OMX_MODULE_PARAMS $module_params"
    echo "Loading Open-MX driver (with $params)"
    module=${OMX_MODULE}

    if ! test -f $module; then
	echo "Cannot find module $module"
        exit -1
    fi

    # modprobe the dependencies
    depends=$(/sbin/modinfo $module | grep ^depends | awk '{print $2}' | sed 's/,/ /')
    for depend in $depends ; do
	echo "Loading dependency module: $depend"
	/sbin/modprobe $depend
    done

    # load the driver
    /sbin/insmod $module $params

    # sleep a bit so that udev is done
    sleep 1

    # create the main device node if necessary
    if ! test -e $MAIN_DEVICE_NAME; then
	echo "Creating '$MAIN_DEVICE_NAME'"
	major=$(sed -nr -e '/^Character devices:/,/^Block devices:/s/ *([0-9]+) *misc/\1/p' /proc/devices)
	minor=$(sed -nr -e 's/ *([0-9]+) *open-mx$/\1/p' /proc/misc)
	if test -z "$major" -o -z "$minor"; then
	    echo "[ERROR] Failed to retrieve main device major/minor numbers"
	else
	    mknod "$MAIN_DEVICE_NAME" c "$major" "$minor" \
		|| echo "[ERROR] Failed to create main device node"
	fi
    fi

    # set main device node mode and group
    echo "Setting group '$MAIN_DEVICE_GROUP' and mode '$MAIN_DEVICE_MODE' on main device '$MAIN_DEVICE_NAME'"
    chgrp "$MAIN_DEVICE_GROUP" "$MAIN_DEVICE_NAME" \
	|| echo "[ERROR] Failed to set main device mode"
    chmod "$MAIN_DEVICE_MODE" "$MAIN_DEVICE_NAME" \
	|| echo "[ERROR] Failed to set main device group"

    # create the raw device node if necessary
    if ! test -e $RAW_DEVICE_NAME; then
	echo "Creating '$RAW_DEVICE_NAME'"
	major=$(sed -nr -e '/^Character devices:/,/^Block devices:/s/ *([0-9]+) *misc/\1/p' /proc/devices)
	minor=$(sed -nr -e 's/ *([0-9]+) *open-mx-raw$/\1/p' /proc/misc)
	if test -z "$major" -o -z "$minor"; then
	    echo "[ERROR] Failed to retrieve raw device major/minor numbers"
	else
	    mknod "$RAW_DEVICE_NAME" c "$major" "$minor" \
		|| echo "[ERROR] Failed to create raw device node"
	fi
    fi

    # set raw device node mode and group
    echo "Setting group '$RAW_DEVICE_GROUP' and mode '$RAW_DEVICE_MODE' on raw device '$RAW_DEVICE_NAME'"
    chgrp "$RAW_DEVICE_GROUP" "$RAW_DEVICE_NAME" \
	|| echo "[ERROR] Failed to set raw device mode"
    chmod "$RAW_DEVICE_MODE" "$RAW_DEVICE_NAME" \
	|| echo "[ERROR] Failed to set raw device group"
}

# Start the peer discovery
start_peer_discovery() {
    if test ${OMX_STATIC_MAPPING} -eq 1 ; then
	# initialize peers
	if test -r ${OMX_PEERS_FILE}; then
	    echo "Initializing peers using file '${OMX_PEERS_FILE}'"
	    ${OMX_PREFIX}/bin/omx_init_peers -c "${OMX_PEERS_FILE}"
	else
	    echo "Peers file ${OMX_PEERS_FILE} does not exist, remember to run omx_peers_init with the correct file"
	fi
    else
	echo "Starting the dynamic peer discovery (${OMX_PEER_DISCOVERY})"
	${OMX_PREFIX}/bin/${OMX_PEER_DISCOVERY} &
	pid=$!

	# wait a bit for the process to start (and maybe fail)
	# FMA can take up to 5 seconds
	sleep 5

	cmdname=$(ps -p $pid -o comm= 2>/dev/null || true)
	if [ -z "$cmdname" ] ; then
	    echo "Discovery exited early"
	else
	    echo "$pid $cmdname" > ${OMX_PID_FILE}
	    echo "Started as pid=$pid"
	fi
    fi
}

# Stop the peer discovery
stop_peer_discovery() {
    if [ -e ${OMX_PID_FILE} ] ; then
	cat ${OMX_PID_FILE} | while read pid cmdname ; do
	realcmdname=$(ps -p $pid -o comm= 2>/dev/null || true)
	if [ "$cmdname" != "$realcmdname" ] ; then
	    echo "Cannot find dynamic peer discovery to kill ($cmdname, pid=$pid)"
	else
	    echo "Killing the dynamic peer discovery ($cmdname, pid=$pid)"
	    kill -9 $pid || true
	    sleep 1
	fi
	done
	rm ${OMX_PID_FILE} || true
    else
	echo "Cannot find dynamic peer discovery to kill"
    fi
}

# Kill all possible peer discovery processes on the system
kill_peer_discovery() {
    echo "Killing all omxoed and fma processes"
    killall -v -9 omxoed || true
    killall -v -9 fma || true
    sleep 1
}

case "$cmd" in
    start)
	load_omx
	start_peer_discovery
	;;
    stop)
	stop_peer_discovery
	unload_omx
	;;
    kill)
	kill_peer_discovery
	stop_peer_discovery
	unload_omx
	;;
    restart)
	stop_peer_discovery
	unload_omx
	load_omx
	start_peer_discovery
        ;;
    start-discovery)
	start_peer_discovery
	;;
    stop-discovery)
	stop_peer_discovery
	;;
    kill-discovery)
	kill_peer_discovery
	stop_peer_discovery
	;;
    restart-discovery)
	stop_peer_discovery
	start_peer_discovery
	;;
    status)
	if grep -E 'open(-|_)mx' /proc/modules > /dev/null; then
	    echo "Open-MX driver is loaded"
	    cat "$MAIN_DEVICE_NAME"
	else
	    echo "Open-MX driver is not loaded"
	fi
	;;
    *)
	echo "Unknown command: $cmd"
	usage
esac

exit 0
