#!/bin/sh

# chkconfig: 2345 30 70
# description: starts Open-MX driver

### BEGIN INIT INFO
# Provides:          mx
# Required-Start:    $network $syslog $remote_fs
# Required-Stop:     $network $syslog $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       Starts the Open-MX driver
### END INIT INFO

# The following configuration variable may be defined in the OMX_CONFIG
# file or in the environment:
#  OMX_IFACES (which interfaces should be attached by the driver on load)
#  OMX_MODULE_PARAMS (module parameters to be passed to the driver)
#  OMX_MODULE_DEPENDS (other modules that should be loaded first, useful if modinfo is missing)
#  OMX_FMA_PARAMS (fma command-line parameters)
#  OMX_FMA_START_TIMEOUT (fma startup timeout)

# Note that this is replaced by make install, not configure!
OMX_PREFIX=@omx_install_prefix@
MAIN_DEVICE_NAME=@omx_main_device_name@
MAIN_DEVICE_GROUP=@omx_main_device_group@
MAIN_DEVICE_MODE=@omx_main_device_mode@
RAW_DEVICE_NAME=@omx_raw_device_name@
RAW_DEVICE_GROUP=@omx_raw_device_group@
RAW_DEVICE_MODE=@omx_raw_device_mode@
OMX_STATIC_MAPPING=@omx_static_peers@
OMX_PEER_DISCOVERY=@omx_peer_discovery@
OMX_PEERS_FILE=@omx_peers_file@
FMS_RUN=@fms_run@
FMS_SERVER=@fms_server@

UDEV=@omx_udev@
UDEV_RULES_DIR=@omx_udev_rules_dir@
UDEV_RULES_FILE=${UDEV_RULES_DIR}/@omx_udev_rules_file@

OMX_PID_FILE=/var/run/open-mx.peer-discovery.pid
OMX_CONFIG=/etc/open-mx/open-mx.conf
LINUX_RELEASE=$(uname -r)
OMX_MODULE="${OMX_PREFIX}/modules/${LINUX_RELEASE}/open-mx.ko"

set -e

if test ! -d ${OMX_PREFIX}; then
    echo "Something bad happened with the install script"
    echo "OMX_PREFIX isn't pointing to a valid directory"
    exit 1
fi

# save environment-enforced values
[ -n "$OMX_IFACES" ] && FORCE_IFACES="$OMX_IFACES"
[ -n "$OMX_MODULE_PARAMS" ] && FORCE_MODULE_PARAMS="$OMX_MODULE_PARAMS"
[ -n "$OMX_MODULE_DEPENDS" ] && FORCE_MODULE_DEPENDS="$OMX_MODULE_DEPENDS"
[ -n "$OMX_FMA_PARAMS" ] && FORCE_FMA_PARAMS="$OMX_FMA_PARAMS"
[ -n "$OMX_FMA_START_TIMEOUT" ] && FORCE_FMA_START_TIMEOUT="$OMX_FMA_START_TIMEOUT"
# read values from the config file
if test -r ${OMX_CONFIG}; then
    . ${OMX_CONFIG}
fi
# restore environment-enforced values
[ -n "$FORCE_IFACES" ] && OMX_IFACES="$FORCE_IFACES"
[ -n "$FORCE_MODULE_PARAMS" ] && OMX_MODULE_PARAMS="$FORCE_MODULE_PARAMS"
[ -n "$FORCE_MODULE_DEPENDS" ] && OMX_MODULE_DEPENDS="$FORCE_MODULE_DEPENDS"
[ -n "$FORCE_FMA_PARAMS" ] && OMX_FMA_PARAMS="$FORCE_FMA_PARAMS"
[ -n "$FORCE_FMA_START_TIMEOUT" ] && OMX_FMA_START_TIMEOUT="$FORCE_FMA_START_TIMEOUT"
# add defaults
[ -z "$OMX_FMA_START_TIMEOUT" ] && OMX_FMA_START_TIMEOUT=5
[ -z "$OMX_IFACES" ] && OMX_IFACES="all"

# drop from Open-MX 1.2
[ -n "$IFACES" ] && echo "WARNING: IFACES deprecated, use OMX_IFACES instead."

usage () {
	echo "Usage: $0 [options] <command> [module load params]"
	echo " Commands:	start stop status restart kill"
	echo "          	start-discovery stop-discovery restart-discovery kill-discovery"
	echo " Options:"
	echo "  --dynamic-peers		Force dynamic peer discovery"
	echo "  --dynamic-peers=<prog>	Force <prog> as the peer discovery tool instead of $OMX_PEER_DISCOVERY"
	echo "  --static-peers		Force static peers from $OMX_PEERS_FILE"
	echo "  --static-peers=<file>		Force static peers from <file>"
	echo "  --module=<file>		Use kernel module from <file>"
	exit 1
}

cmd=
module_params=

while [ $# -ne 0 ] ; do
    if [ $1 = "--dynamic-peers" ] ; then
	OMX_STATIC_MAPPING=0
    else if [ ${1##--dynamic-peers=} != $1 ] ; then
	OMX_STATIC_MAPPING=0
	OMX_PEER_DISCOVERY=${1##--dynamic-peers=}
    else if [ $1 = "--static-peers" ] ; then
	OMX_STATIC_MAPPING=1
    else if [ ${1##--static-peers=} != $1 ] ; then
	OMX_STATIC_MAPPING=1
	OMX_PEERS_FILE=${1##--static-peers=}
    else if [ ${1##--module=} != $1 ] ; then
	OMX_MODULE=${1##--module=}
    else if [ ${1##--} != $1 ] ; then
	usage
    else if [ -z "$cmd" ] ; then
	cmd=$1
    else
	module_params="$module_params $1"
    fi fi fi fi fi fi fi
    shift
done

[ -z "$cmd" ] && usage

OMX_MODULE_PARAMS="${OMX_MODULE_PARAMS} ifnames=${OMX_IFACES}"

# Remove the Open-MX module if loaded
unload_omx() {
    if grep -E 'open(-|_)mx' /proc/modules > /dev/null; then
        echo "Removing Open-MX driver"
        /sbin/rmmod open-mx
    fi

    # always remove device nodes, even if udev wasn't used.
    # we could be stopping a session from another build anyway
    rm -f "/dev/$MAIN_DEVICE_NAME" || true
    rm -f "/dev/$RAW_DEVICE_NAME" || true
}

# Check whether udev is running
udev_is_active() {
    test x$UDEV = x1 && ( test -d /dev/.udev || test -e /dev/.udev.tdb || test -d /dev/.udevdb )
}

# Create device node file if necessary
check_or_create_device() {
    path="$1"; shift
    group="$1"; shift
    mode="$1"; shift
    kernelname="$1"; shift
    name="$1"; shift

    # create the device node if udev is disabled or if the file doesn't exist yet
    if ! udev_is_active || ! test -e "$path" ; then
	echo "  Creating '$path' which does not exist yet"
	major=$(sed -nr -e '/^Character devices:/,/^Block devices:/s/ *([0-9]+) *misc/\1/p' /proc/devices)
	minor=$(sed -nr -e 's/ *([0-9]+) *'$kernelname'$/\1/p' /proc/misc)
	if test -z "$major" -o -z "$minor"; then
	    echo "  [ERROR] Failed to retrieve $name device major/minor numbers"
	else
	    mknod "$path" c "$major" "$minor" \
		|| echo "  [ERROR] Failed to create $name device node"
	fi
	created_device=1
    fi

    # set device node mode and group if we created it manually, or if udev is disabled or doesn't know how to do it
    if test x$created_device = "x1" || ! udev_is_active || ! test -f "$UDEV_RULES_FILE" ; then
	echo "  Setting group '$group' and mode '$mode' on $name device '$path'"
	chgrp "$group" "$path" \
	    || echo "  [ERROR] Failed to set $name device mode"
	chmod "$mode" "$path" \
	    || echo "  [ERROR] Failed to set $name device group"
    fi

    # print the device status
    ls -l "$path" | sed -e 's/^/  /'
}

# Load the Open-MX module
load_omx() {
    params="$OMX_MODULE_PARAMS $module_params"
    echo "Loading Open-MX driver (with $params)"
    module=${OMX_MODULE}

    if ! test -f $module; then
	echo "Cannot find module $module"
        exit -1
    fi

    # modprobe the dependencies
    depends="$(/sbin/modinfo $module 2>/dev/null | grep ^depends | awk '{print $2}' | sed 's/,/ /') $OMX_MODULE_DEPENDS"
    for depend in $depends ; do
	echo "Loading dependency module: $depend"
	/sbin/modprobe $depend
    done

    # load the driver
    /sbin/insmod $module $params

    # sleep a bit so that udev is done
    sleep 1

    # take care of device nodes
    echo "Creating device node files if necessary..."

    # say a bit about what's happening
    if ! udev_is_active ; then
	echo "  udev does not seem to be running,"
	echo "   creating device nodes manually."
    else if ! test -f "$UDEV_RULES_FILE" ; then
	echo "  udev rules not found (UDEV_RULES_FILE=$UDEV_RULES_FILE),"
	echo "   only creating device nodes manually and setting their"
 	echo "   group and mode if udev did not create them."
    else
	echo "  udev rules found (UDEV_RULES_FILE=$UDEV_RULES_FILE),"
	echo "   assuming udev manages device files, unless a file is missing."
    fi fi

    # do the actual work
    check_or_create_device "/dev/$MAIN_DEVICE_NAME" "$MAIN_DEVICE_GROUP" "$MAIN_DEVICE_MODE" "open-mx" "main"
    check_or_create_device "/dev/$RAW_DEVICE_NAME" "$RAW_DEVICE_GROUP" "$RAW_DEVICE_MODE" "open-mx-raw" "raw"
}

# Check the driver status
check_omx() {
    ${OMX_PREFIX}/bin/omx_info -q
}

# Start the peer discovery
start_peer_discovery() {
    if test ${OMX_STATIC_MAPPING} -eq 1 ; then
	# initialize peers
	if test -r ${OMX_PEERS_FILE}; then
	    echo "Initializing peers using file '${OMX_PEERS_FILE}'"
	    ${OMX_PREFIX}/bin/omx_init_peers -c "${OMX_PEERS_FILE}"
	else
	    echo "Peers file ${OMX_PEERS_FILE} does not exist, remember to run omx_peers_init with the correct file"
	fi
    else
	if [ "${OMX_PEER_DISCOVERY}" = "fma" ] ; then
	    discover_params="-d $OMX_FMA_PARAMS"

	    if [ -n "$FMS_SERVER" ] ; then
		discover_params="$discover_params -s $FMS_SERVER"
	    fi

	    if [ ! -d "$FMS_RUN" ] ; then
		echo "Creating FMS run directory $FMS_RUN..."
		mkdir -p "$FMS_RUN"
	    fi
	fi

	# save the old fma.pid to see if it changed
	[ "${OMX_PEER_DISCOVERY}" = "fma" ] && oldfmapid=$(cat "$FMS_RUN/fma.pid" 2>/dev/null || true)

	echo "Starting the dynamic peer discovery (${OMX_PEER_DISCOVERY} ${discover_params})"
	${OMX_PREFIX}/bin/${OMX_PEER_DISCOVERY} ${discover_params} &
	pid=$!

	# wait a bit for the process to start (and maybe fail)
	sleep 5

	if [ "${OMX_PEER_DISCOVERY}" = "fma" ] ; then
	    # FMA can take up to 10 seconds
	    echo "Waiting ${OMX_FMA_START_TIMEOUT}s for FMA to start..."
	    sleep $OMX_FMA_START_TIMEOUT
	    # fma -d will daemonize, so the $pid child is gone.
	    # look in fma.pid and use it if it changed
	    newfmapid=$(cat "$FMS_RUN/fma.pid" 2>/dev/null || true)
	    [ "$newfmapid" != "$oldfmapid" ] && [ -n "$newfmapid" ] && pid="$newfmapid"
	fi
	cmdname=$(ps -p $pid -o comm= 2>/dev/null || true)
	if [ -z "$cmdname" ] ; then
	    echo "Discovery exited early"
	else
	    echo "$pid $cmdname" > ${OMX_PID_FILE}
	    echo "Started as pid=$pid"
	fi
    fi
}

# Stop the peer discovery
stop_peer_discovery() {
    if [ -e ${OMX_PID_FILE} ] ; then
	cat ${OMX_PID_FILE} | while read pid cmdname ; do
	realcmdname=$(ps -p $pid -o comm= 2>/dev/null || true)
	if [ "$cmdname" != "$realcmdname" ] ; then
	    echo "Cannot find dynamic peer discovery to kill ($cmdname, pid=$pid)"
	else
	    echo "Killing the dynamic peer discovery ($cmdname, pid=$pid)"
	    kill -9 $pid || true
	    sleep 1
	fi
	done
	rm -f ${OMX_PID_FILE} || true
    else
	echo "Cannot find dynamic peer discovery to kill"
    fi
}

# Kill all possible peer discovery processes on the system
kill_peer_discovery() {
    echo "Killing all omxoed and fma processes"
    killall -v -9 omxoed || true
    killall -v -9 fma || true
    sleep 1
}

case "$cmd" in
    start)
	load_omx
	start_peer_discovery
	check_omx
	;;
    stop)
	stop_peer_discovery
	unload_omx
	;;
    kill)
	kill_peer_discovery
	stop_peer_discovery
	unload_omx
	;;
    restart)
	stop_peer_discovery
	unload_omx
	load_omx
	start_peer_discovery
	check_omx
        ;;
    start-discovery)
	start_peer_discovery
	;;
    stop-discovery)
	stop_peer_discovery
	;;
    kill-discovery)
	kill_peer_discovery
	stop_peer_discovery
	;;
    restart-discovery)
	stop_peer_discovery
	start_peer_discovery
	;;
    status)
	if grep -E 'open(-|_)mx' /proc/modules > /dev/null; then
	    echo "Open-MX driver is loaded"
	    cat "/dev/$MAIN_DEVICE_NAME"
	    check_omx
	else
	    echo "Open-MX driver is not loaded"
	fi
	;;
    *)
	echo "Unknown command: $cmd"
	usage
esac

exit 0
