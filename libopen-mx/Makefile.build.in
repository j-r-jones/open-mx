exec_prefix	=	@exec_prefix@
libdir	=	@libdir@
prefix	=	@prefix@
abs_srcdir	=	@abs_srcdir@

include @abs_top_srcdir@/common.mk
REL_DIR	=	$(omx_build_lib_dir)/

CC	=	@CC@
SHARED_LD	=	$(CC) --shared #FIXME?
AR	=	@AR@
MKDIR_P	=	@MKDIR_P@
INSTALL	=	@INSTALL@
LN_S	=	@LN_S@

CPPFLAGS	+=	-imacros @abs_top_builddir@/common/omx_config.h
CPPFLAGS	+=	-I@abs_top_srcdir@/common
CPPFLAGS	+=	@CPPFLAGS@

CFLAGS	+=	-Wall -fstrict-aliasing -Wstrict-aliasing=2
CFLAGS	+=	@CFLAGS@
ifeq ($(omx_build_lib_debug),1)
  CPPFLAGS	+=	-DOMX_LIB_DEBUG=1
  CFLAGS	+=	@DBGCFLAGS@
endif

STATIC_CFLAGS	+=	
DYNAMIC_CFLAGS	+=	-fpic

ALL_SRCS	=	$(wildcard @abs_srcdir@/*.c)
ifeq (@OMX_MX_ABI_COMPAT@,1)
  SRCS	=	$(ALL_SRCS)
  DYNAMIC_LDFLAGS += -Wl,--version-script,$(abs_srcdir)/omx__mx_lib.version
else
  SRCS	=	$(filter-out @abs_srcdir@/omx__mx_%compat.c,$(ALL_SRCS))
endif

STATIC_OBJS	=	$(patsubst @abs_srcdir@/%.c,%.o,$(SRCS))
ASSERTIONS_STATIC_OBJ	=	omx__assertions.o
STATIC_LIB_OBJS	=	$(filter-out $(ASSERTIONS_STATIC_OBJ),$(STATIC_OBJS))
STATIC_LIB	=	@OPEN_MX_LIB_STATIC@

DYNAMIC_OBJS	=	$(subst .o,.lo,$(STATIC_OBJS))
DYNAMIC_LIB_OBJS	=	$(subst .o,.lo,$(STATIC_LIB_OBJS))
DYNAMIC_LIB	=	@OPEN_MX_LIB_DYNAMIC@

.PHONY: all installonly install assertions depend clean distclean

# build assertions first, then the actual lib
all: assertions $(STATIC_LIB) $(DYNAMIC_LIB)

###############
# dependencies

DEPSRCDIR	=	@abs_srcdir@/
DEPDIR	=	../
REL_DEPDIR	=	$(shell echo $(REL_DIR)$(DEPDIR) | sed -r -e 's@[^/]+/\.\./@@')
DEPS	=	$(patsubst $(DEPSRCDIR)%.c,$(DEPDIR)%.d,$(SRCS))
# make sure the dependency contains both .lo and .o targets
BUILD_O_AND_LO_OBJECTS	=	1

include @abs_top_srcdir@/depend.mk

########
# build

$(STATIC_LIB): $(STATIC_LIB_OBJS)
	$(CMDECHO) "  AR      $(REL_DIR)$@"
	$(CMDPREFIX) $(AR) cr $@ $^
	$(CMDPREFIX) if test @OMX_MX_ABI_COMPAT@ -eq 1; then \
		$(CMDECHOAFTERPREFIX) "  LN      $(REL_DIR)libmyriexpress.a" ; \
		$(RM) libmyriexpress.a ; \
		$(LN_S) $(STATIC_LIB) libmyriexpress.a ; \
	fi

$(DYNAMIC_LIB): $(DYNAMIC_LIB_OBJS)
	$(CMDECHO) "  LD      $(REL_DIR)$@"
	$(CMDPREFIX) $(SHARED_LD) $(DYNAMIC_LDFLAGS) -o $@ $^
	$(CMDPREFIX) if test @OMX_MX_ABI_COMPAT@ -eq 1; then \
		$(CMDECHOAFTERPREFIX) "  LN      $(REL_DIR)libmyriexpress.so" ; \
		$(RM) libmyriexpress.so ; \
		$(LN_S) $(DYNAMIC_LIB) libmyriexpress.so ; \
	fi

assertions: $(ASSERTIONS_STATIC_OBJ)

# build and create dependency file

$(STATIC_OBJS): %.o: @abs_srcdir@/%.c
	$(CMDECHO) "  CC      $(REL_DIR)$@"
	$(CMDPREFIX) $(CC) -c $(CPPFLAGS) $(CFLAGS) $(STATIC_CFLAGS) $(BUILDDEPFLAGS) -MT $@ -MT $(subst .o,.lo,$@) -MF $(patsubst %.o,$(DEPDIR)%.d, $@) $< -o $@

$(DYNAMIC_OBJS): %.lo: @abs_srcdir@/%.c
	$(CMDECHO) "  CC      $(REL_DIR)$@"
	$(CMDPREFIX) $(CC) -c $(CPPFLAGS) $(CFLAGS) $(DYNAMIC_CFLAGS) $(BUILDDEPFLAGS) -MT $(subst .lo,.o,$@) -MT $@ -MF $(patsubst %.lo,$(DEPDIR)%.d, $@) $< -o $@

##########
# install

installonly:
	$(CMDECHO) "  MKDIR   $(DESTDIR)$(libdir)$(libdirsuffix)/"
	$(CMDPREFIX) if test ! -d $(DESTDIR)$(libdir)$(libdirsuffix); then \
		$(MKDIR_P) $(DESTDIR)$(libdir)$(libdirsuffix) ; \
	fi

	$(CMDECHO) "  INSTALL $(DESTDIR)$(libdir)$(libdirsuffix)/$(STATIC_LIB) $(DESTDIR)$(libdir)$(libdirsuffix)/$(DYNAMIC_LIB)"
	$(CMDPREFIX) $(INSTALL) -m 0644 $(STATIC_LIB) $(DYNAMIC_LIB) $(DESTDIR)$(libdir)$(libdirsuffix)/

	$(CMDPREFIX) if test @OMX_MX_ABI_COMPAT@ -eq 1; then \
		$(CMDECHOAFTERPREFIX) "  LN      $(DESTDIR)$(libdir)$(libdirsuffix)/libmyriexpress.a" ; \
		$(CMDECHOAFTERPREFIX) "  LN      $(DESTDIR)$(libdir)$(libdirsuffix)/libmyriexpress.so" ; \
		$(RM) $(DESTDIR)$(libdir)$(libdirsuffix)/libmyriexpress.a $(DESTDIR)$(libdir)$(libdirsuffix)/libmyriexpress.so ; \
		$(LN_S) $(STATIC_LIB) $(DESTDIR)$(libdir)$(libdirsuffix)/libmyriexpress.a ; \
		$(LN_S) $(DYNAMIC_LIB) $(DESTDIR)$(libdir)$(libdirsuffix)/libmyriexpress.so ; \
	fi

install: all installonly

########
# clean

clean:
	$(CMDECHO) "  RM      $(patsubst %,$(REL_DIR)%,$(STATIC_LIB) $(STATIC_LIB_OBJS) $(DYNAMIC_LIB) $(DYNAMIC_LIB_OBJS) $(ASSERTIONS_STATIC_OBJ))"
	$(CMDPREFIX) $(RM) $(STATIC_LIB) $(STATIC_LIB_OBJS) $(DYNAMIC_LIB) $(DYNAMIC_LIB_OBJS) $(ASSERTIONS_STATIC_OBJ)

distclean: clean
	$(CMDECHO) "  RM      $(patsubst %,$(REL_DIR)%,$(DEPS))"
	$(CMDPREFIX) $(RM) $(DEPS)
